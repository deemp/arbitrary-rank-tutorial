name: arbitrary-rank-tutorial
synopsis: "A tutorial implementation of Arralac - a lambda calculus with arbitrary-rank polymorphism"
version: 0.0.1
github: "deemp/arbitrary-rank-tutorial"
license: BSD3
author: "Danila Danko, Nickolay Kudasov"
maintainer: "br4ch1st0chr0n3@gmail.com, nickolay.kudasov@gmail.com"
copyright: "2024 Danila Danko, Nickolay Kudasov"

extra-source-files:
  - README.md
  - CHANGELOG.md
  - grammar/Arralac.cf

verbatim:
  cabal-version: 1.24

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            Web

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description: |
  Arralac: `Ar`bitrary-`ra`nk polymorphism + `la`mbda `c`alculus

  Please see the README on GitHub at <https://github.com/deemp/arbitrary-rank-tutorial#readme>

# Running Setup.hs requires:
# - [happy](https://github.com/haskell/happy)
# - [alex](https://github.com/haskell/alex)
# - [BNFC](https://github.com/BNFC/bnfc)
# Though they're Haskell packages, it's easier to provide them via Nix
# than via [build-tool-depends](https://cabal.readthedocs.io/en/3.4/cabal-package.html#pkg-field-build-tool-depends)
#
# See:
# - https://github.com/haskell/cabal/issues/8434#issuecomment-1652017630
# - https://gist.github.com/ScottFreeCode/ef9f254e2dd91544bba4a068852fc81f
flags:
  nix:
    description: In a Nix environment.
    default: false
    manual: true

when:
  - condition: "!flag(nix)"
    build-tools:
      - alex:alex
      - happy:happy
      - BNFC:bnfc

custom-setup:
  dependencies:
    - base >= 4.11.0.0 && < 5.0
    - Cabal >= 2.4.0.1 && < 4.0
    - code-page
    - directory
    - process >= 1.6.3.0
    - text
    - with-utf8

dependencies:
  - aeson
  - array >= 0.5.5.0
  - base >= 4.7 && < 5
  - bifunctors
  - co-log-core
  - code-page
  - containers
  - deepseq
  - free-foil
  - generic-lens
  - IntervalMap
  - kind-generics
  - kind-generics-th
  - lens
  - lsp
  - lsp-types
  - mtl
  - sorted-list
  - optparse-applicative
  - prettyprinter
  - PyF
  - stm
  - text
  - unliftio
  - with-utf8

default-extensions:
  - ApplicativeDo
  - BlockArguments
  - ConstraintKinds
  - DataKinds
  - DeriveAnyClass
  - DeriveDataTypeable
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveTraversable
  - DerivingStrategies
  - DerivingVia
  - DuplicateRecordFields
  - ExplicitNamespaces
  - FlexibleContexts
  - FlexibleInstances
  - GADTs
  - GeneralizedNewtypeDeriving
  - ImplicitParams
  - ImportQualifiedPost
  - InstanceSigs
  - KindSignatures
  - LambdaCase
  - MonoLocalBinds
  - MultiParamTypeClasses
  - MultiWayIf
  - NamedFieldPuns
  - OverloadedLabels
  - OverloadedRecordDot
  - OverloadedStrings
  - PatternSynonyms
  - PolyKinds
  - QuantifiedConstraints
  - QuasiQuotes
  - RankNTypes
  - ScopedTypeVariables
  - StandaloneDeriving
  - TemplateHaskell
  - TupleSections
  - TypeApplications
  - TypeFamilies
  - TypeFamilyDependencies
  - TypeOperators
  - TypeSynonymInstances
  - UndecidableInstances

ghc-options:
  - -Wall
  - -Wcompat
  - -Widentities
  - -Wincomplete-record-updates
  - -Wincomplete-uni-patterns
  - -Wmissing-home-modules
  - -Wpartial-fields
  - -Wredundant-constraints
  - -Wno-missing-export-lists

library:
  source-dirs: src
  when:
    - condition: false
      other-modules:
        - Language.STLC.Syntax.Test
        - Language.STLC.Syntax.ErrM
        - Language.STLC.Syntax.Skel

executables:
  arralac:
    main: Main.hs
    source-dirs: app
    ghc-options:
      - -threaded
      - -rtsopts
      - -with-rtsopts=-N
    dependencies:
      - arbitrary-rank-tutorial
      - with-utf8
