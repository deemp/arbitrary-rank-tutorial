-- File generated by the BNF Converter (bnfc 2.9.6).

{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language Syntax.

module Language.STLC.Syntax.Abs where

import Prelude (Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Functor, Foldable, Traversable
  , Int, Maybe(..)
  , fmap, fst, snd
  )
import qualified Data.String

import qualified Data.Text
import qualified Data.Data    as C (Data, Typeable)
import qualified GHC.Generics as C (Generic)

type Program = Program' BNFC'Position
data Program' a = Program a (Exp' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable, C.Data, C.Typeable, C.Generic)

type Var = Var' BNFC'Position
data Var' a = Var a NameLowerCase
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable, C.Data, C.Typeable, C.Generic)

type Exp = Exp' BNFC'Position
data Exp' a
    = ExpVar a (Var' a)
    | ExpInt a Integer
    | ExpString a String
    | ExpAbs a (Var' a) (Exp' a)
    | ExpAbsAnno a (Var' a) (Type' a) (Exp' a)
    | ExpApp a (Exp' a) (Exp' a)
    | ExpLet a (Var' a) (Exp' a) (Exp' a)
    | ExpAnno a (Exp' a) (Type' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable, C.Data, C.Typeable, C.Generic)

type Type = Type' BNFC'Position
data Type' a
    = TypeConcrete a NameUpperCase
    | TypeVariable a NameLowerCase
    | TypeFunc a (Type' a) (Type' a)
    | TypeForall a [TypeVariable' a] (Type' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable, C.Data, C.Typeable, C.Generic)

type TypeVariable = TypeVariable' BNFC'Position
data TypeVariable' a = TypeVariableName a NameLowerCase
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable, C.Data, C.Typeable, C.Generic)

newtype NameLowerCase = NameLowerCase Data.Text.Text
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

newtype NameUpperCase = NameUpperCase Data.Text.Text
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)

-- | Position range ((startLine, startColumn), (endLine, endColumn)) of something.

type BNFC'Position = C.Maybe ((C.Int, C.Int), (C.Int, C.Int))

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: (C.Int, C.Int) -> (C.Int, C.Int) -> BNFC'Position
pattern BNFC'Position start end = C.Just (start, end)

{-# COMPLETE BNFC'Position, BNFC'NoPosition #-}

startLineColBNFC'Position :: BNFC'Position -> C.Maybe (C.Int, C.Int)
startLineColBNFC'Position = C.fmap C.fst

endLineColBNFC'Position :: BNFC'Position -> C.Maybe (C.Int, C.Int)
endLineColBNFC'Position = C.fmap C.snd

spanBNFC'Position :: BNFC'Position -> BNFC'Position -> BNFC'Position
spanBNFC'Position ( BNFC'Position start _end ) ( BNFC'Position _start end ) = BNFC'Position start end
spanBNFC'Position ( BNFC'Position start end ) _ = BNFC'Position start end
spanBNFC'Position _ ( BNFC'Position start end ) = BNFC'Position start end
spanBNFC'Position BNFC'NoPosition BNFC'NoPosition = BNFC'NoPosition

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Program where
  hasPosition = \case
    Program p _ -> p

instance HasPosition Var where
  hasPosition = \case
    Var p _ -> p

instance HasPosition Exp where
  hasPosition = \case
    ExpVar p _ -> p
    ExpInt p _ -> p
    ExpString p _ -> p
    ExpAbs p _ _ -> p
    ExpAbsAnno p _ _ _ -> p
    ExpApp p _ _ -> p
    ExpLet p _ _ _ -> p
    ExpAnno p _ _ -> p

instance HasPosition Type where
  hasPosition = \case
    TypeConcrete p _ -> p
    TypeVariable p _ -> p
    TypeFunc p _ _ -> p
    TypeForall p _ _ -> p

instance HasPosition TypeVariable where
  hasPosition = \case
    TypeVariableName p _ -> p

