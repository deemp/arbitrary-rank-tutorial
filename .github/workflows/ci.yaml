on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"

jobs:
  # TODO add a faster job that runs just nix build
  build:
    strategy:
      matrix:
        os:
          - ubuntu-24.04-arm
          - ubuntu-24.04
          - macos-15
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    permissions:
      actions: write
    steps:
      - uses: actions/checkout@v4

      - name: Get cache paths
        id: get-cache-paths
        run: |
          echo 'cache-paths<<EOM' >> "$GITHUB_OUTPUT"

          # https://cabal.readthedocs.io/en/stable/config.html#directories
          echo "$(cabal path --cache-home -v0)" >> "$GITHUB_OUTPUT"
          echo 'dist-newstyle' >>"$GITHUB_OUTPUT"

          echo "$(stack path --stack-root --silent)" >> "$GITHUB_OUTPUT"
          echo '**/.stack-work' >> "$GITHUB_OUTPUT"

          echo 'EOM' >> "$GITHUB_OUTPUT"

      # TODO
      # use the tagged version and remove `with`
      # after the new action version is released
      - uses: nixbuild/nix-quick-install-action@73e45e62a28aba99d0b31a37a1c9ddee360878a6
        with:
          nix_archives_url: https://github.com/deemp/nix-quick-install-action/releases/download/v29

      - uses: nix-community/cache-nix-action/restore@v6
        id: restore
        with:
          # restore a cache using this key
          primary-key: nix-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-${{ runner.arch }}
          paths: ${{ steps.get-cache-paths.outputs.cache-paths }}

      - name: Build and run with Nix
        run: |
          nix run .#arbitrary-rank-tutorial -- interpret whnf tutorial/test/data/Program1.arralac

      - name: Build and run with Cabal
        if: always()
        run: |
          nix develop .#ci-build -c bash -c '
            cabal build all
            cabal run arbitrary-rank-tutorial -- interpret whnf tutorial/test/data/Program1.arralac
          '

      - name: Build and run with Stack
        if: always()
        run: |
          nix develop .#ci-build -c bash -c '
            stack run -- arralac interpret whnf tutorial/test/data/Program1.arralac
          '

      - name: Save paths from GC
        if: always()
        run: nix profile install .#saveFromGC

      - uses: nix-community/cache-nix-action/save@v6
        if: always()
        with:
          paths: ${{ steps.get-cache-paths.outputs.cache-paths }}
          # save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # collect garbage until Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          gc-max-store-size: 1073741824
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-${{ runner.os }}-${{ runner.arch }}-
          # created more than this number of seconds ago relative to the start of the `Post Restore` phase
          purge-created: 0
          # except the version with the `primary-key`, if it exists
          purge-primary-key: never
