on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"

jobs:
  build:
    strategy:
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-22.04
          - macos-13
          - macos-15
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    permissions:
      actions: write
    env:
      paths: |
        ~/.stack
        **/.stack-work

        ~/.cabal/packages
        ~/.cabal/store
        dist-newstyle
    steps:
      - uses: actions/checkout@v4

      - uses: nixbuild/nix-quick-install-action@v29

      - uses: nix-community/cache-nix-action/restore@v6
        id: restore
        with:
          # restore a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          paths: ${{ env.paths }}

      - name: Build with Nix
        run: nix build

      - name: Build with cabal
        run: nix develop --profile ./foo -c bash -c 'cabal update && cabal build all'

      - name: Build with stack
        run: nix develop --profile ./foo -c stack build

      - uses: nix-community/cache-nix-action/save@v6
        if: always() && steps.restore.outputs.hit-primary-key != 'true'
        with:
          paths: ${{ env.paths }}
          # save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # collect garbage until Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          gc-max-store-size: 1073741824
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-${{ runner.os }}-
          # created more than this number of seconds ago relative to the start of the `Post Restore` phase
          purge-created: 0
          # except the version with the `primary-key`, if it exists
          purge-primary-key: never
