{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "arralac",
  "scopeName": "source.arralac",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#types"
    },
    {
      "include": "#lambda"
    },
    {
      "include": "#let-binding"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#function-call"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-dash.arralac",
          "match": "--.*$"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.arralac",
          "match": "\\b(let|in|forall)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.arralac",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.arralac",
          "match": "\\\\."
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.type.arralac",
          "match": "::|->"
        },
        {
          "name": "keyword.operator.assignment.arralac",
          "match": "="
        },
        {
          "name": "keyword.operator.quantifier.arralac",
          "match": "\\."
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "comment": "Matches identifiers starting with an uppercase letter, like 'String', 'Int', etc.",
          "name": "entity.name.type.arralac",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "lambda": {
      "comment": "Matches lambda abstractions like '\\x.'",
      "patterns": [
        {
          "match": "(\\\\)\\s*([a-z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": { "name": "punctuation.definition.lambda.arralac" },
            "2": { "name": "variable.parameter.arralac" }
          }
        }
      ]
    },
    "let-binding": {
      "comment": "Highlights the function/variable name being defined in a 'let' expression.",
      "patterns": [
        {
          "match": "\\b(let)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": { "name": "keyword.control.let.arralac" },
            "2": { "name": "entity.name.function.arralac" }
          }
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.parenthesis.arralac",
          "match": "[\\(\\)]"
        }
      ]
    },
    "function-call": {
      "comment": "Catches general identifiers, typically used as variables or function calls.",
      "patterns": [
        {
          "name": "variable.other.arralac",
          "match": "\\b[a-z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}