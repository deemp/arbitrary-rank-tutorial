token Var lower (char - [" \r\n\t,.|':;!?][}{)(⟧⟦"])* ;
token ModuleName upper (char - [" \r\n\t,.|':;!?][}{)(⟧⟦"])* ;

layout toplevel ;
layout "where" ;

comment "--" ;

Program. Program ::= [Statement] ;

ImportItemGlob. ImportItem ::= "*";
ImportItemGlobAs. ImportItem ::= "*" "as" ModuleName;
ImportItemNames. ImportItem ::= "{" [ ImportItemName ] "}" ;


ImportItemNameModule. ImportItemName ::= ModuleName ;
ImportItemNameVar.    ImportItemName ::= Var ;

separator ImportItemName ",";

LocationLocal. Location ::= ModuleName;
LocationPath. Location ::= String;

StatementModule.        Statement ::= "module" ModuleName "where" "{" [ Statement ] "}";
StatementImportLocal.   Statement ::= "import" ImportItem "from" Location ;
StatementFunSig.        Statement ::= Var ":" Type ;
StatementFun.           Statement ::= Var "=" Exp ;
StatementFunWhere.      Statement ::= Var "=" Exp "where" "{" [Statement] "}" ;
StatementExport. Statement ::= "export" [ ExportItem ];

ExportItemModuleName. ExportItem ::= ModuleName;
ExportItemVar.        ExportItem ::= Var;

separator ExportItem ",";

-- TODO Remove from the program before processing 
-- and throw a syntax error on them
-- or, move to another file
-- Though it's much easier to leave these commands as is
StatementCommandTypeCheck. Statement ::= "#typecheck" ExpUnderCtx "<=" Type ;
StatementCommandTypeSynth. Statement ::= "#typesynth" ExpUnderCtx "=>" SynthResult ;

terminator Statement ";";

SynthResultType.    SynthResult ::= "!" Type ;
SynthResultUnknown. SynthResult ::= "?" ;


ExpApp.  Exp1 ::= "(" Exp ")" Exp ;
ExpAbs.  Exp2 ::= "\\" Var "." Exp ;

ExpPlus. Exp3 ::= Exp3 "+" Exp4 ;
ExpVar.  Exp4 ::= Var ;
ExpNumber. Exp5 ::= Integer ;
ExpAccessor. Exp6 ::= "#" [Accessor];

coercions Exp 6;

AccessorModuleName. Accessor ::= ModuleName;
AccessorVar.        Accessor ::= Var;

separator Accessor ".";

TypeUnit. Type1 ::= "Int" ;
TypeFunc. Type2 ::= Type "->" Type ;

coercions Type 2;

CtxVar. CtxVar ::= Var ":" Type ;
separator CtxVar "," ;

Ctx. Ctx ::= [CtxVar];

ExpUnderCtx. ExpUnderCtx ::= Ctx "|-" Exp ;
