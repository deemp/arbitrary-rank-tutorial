token NameLowerCase lower (char - [" \r\n\t,.|':;!?][}{)(⟧⟦"])* ;
token NameUpperCase upper (char - [" \r\n\t,.|':;!?][}{)(⟧⟦"])* ;

-- layout toplevel ;

comment "--" ;

Program. Program ::= Exp ;


Var. Var ::= NameLowerCase ;

ExpVar.        Exp1 ::= Var ;
ExpInt.        Exp2 ::= Integer ;
ExpAbs.        Exp3 ::= "\\" Var "." Exp ;
ExpAbsAnno.    Exp4 ::= "\\" "(" Var "::" Type ")" "." Exp ;
ExpApp.        Exp5 ::= Exp11 Exp10 ;
ExpLet.        Exp6 ::= "let" Var "=" Exp "in" Exp ;
ExpAnno.       Exp7 ::= Exp "::" Type ;

_. Exp ::= Exp1 ;
_. Exp ::= Exp2 ;
_. Exp ::= Exp3 ;
_. Exp ::= Exp4 ;
_. Exp ::= Exp5 ;
_. Exp ::= Exp6 ;
_. Exp ::= Exp7 ;
_. Exp ::= "(" Exp ")" ;

_. Exp10 ::= Exp1 ;
_. Exp10 ::= Exp2 ;
_. Exp10 ::= "(" Exp ")" ;

_. Exp11 ::= Exp1 ;
_. Exp11 ::= Exp5 ;
_. Exp11 ::= "(" Exp ")" ;


-- rho
TypeConcrete. Type1 ::= NameUpperCase ;
TypeVariable. Type2 ::= NameLowerCase ;
TypeFunc.     Type3 ::= Type4 "->" Type3 ;

_. Type3 ::= Type1 ;
_. Type3 ::= Type2 ;
_. Type3 ::= Type5 ;

-- sigma
-- TODO sigma in parens

TypeVariableName. TypeVariable ::= NameLowerCase;

TypeForall.       Type4 ::= "forall" [TypeVariable] "." Type3 ;

-- https://stackoverflow.com/a/66437525
separator TypeVariable " " ;

_. Type4 ::= Type3 ;

TypeParen. Type5 ::= "(" Type3 ")";

-- type
_. Type ::= Type1 ;
_. Type ::= Type2 ;
_. Type ::= Type3 ;
_. Type ::= Type4 ;
_. Type ::= Type5 ;
