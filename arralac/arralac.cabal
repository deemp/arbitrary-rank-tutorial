cabal-version: 1.24

-- This file has been generated from package.yaml by hpack version 0.37.0.
--
-- see: https://github.com/sol/hpack

name:           arralac
version:        0.0.1
synopsis:       A tutorial implementation of Arralac - a lambda calculus with arbitrary-rank polymorphism
description:    Arralac: `Ar`bitrary-`ra`nk polymorphism + `la`mbda `c`alculus
                .
                Please see the README on GitHub at <https://github.com/deemp/arbitrary-rank-tutorial#readme>
homepage:       https://github.com/deemp/arbitrary-rank-tutorial#readme
bug-reports:    https://github.com/deemp/arbitrary-rank-tutorial/issues
author:         Danila Danko, Nickolay Kudasov
maintainer:     br4ch1st0chr0n3@gmail.com, nickolay.kudasov@gmail.com
copyright:      2024 Danila Danko, Nickolay Kudasov
license:        BSD3
build-type:     Custom
extra-source-files:
    README.md
    CHANGELOG.md
    grammar/Arralac.cf

source-repository head
  type: git
  location: https://github.com/deemp/arbitrary-rank-tutorial

custom-setup
  setup-depends:
      Cabal >=2.4.0.1 && <4.0
    , base >=4.11.0.0 && <5.0
    , code-page
    , directory
    , process >=1.6.3.0
    , text
    , with-utf8

flag nix
  description: In a Nix environment.
  manual: True
  default: False

library
  exposed-modules:
      Language.Arralac.CLI.Commands
      Language.Arralac.CLI.Defaults
      Language.Arralac.CLI.Handle
      Language.Arralac.CLI.Parse
      Language.Arralac.CLI.Run
      Language.Arralac.Core.AST
      Language.Arralac.Core.ConvertZonked
      Language.Arralac.Core.CoreNameBinder
      Language.Arralac.Core.PrettyScoped
      Language.Arralac.Driver.ParserToZonker.Run
      Language.Arralac.Driver.ReaderToZonker.Run
      Language.Arralac.Examples
      Language.Arralac.Interpreter.Run
      Language.Arralac.Interpreter.Whnf
      Language.Arralac.LanguageServer.Diagnostics
      Language.Arralac.LanguageServer.IntervalMap
      Language.Arralac.LanguageServer.Run
      Language.Arralac.LanguageServer.Server
      Language.Arralac.Parser.Abs
      Language.Arralac.Parser.Error
      Language.Arralac.Parser.Generated.Abs
      Language.Arralac.Parser.Generated.Lex
      Language.Arralac.Parser.Generated.Par
      Language.Arralac.Parser.Run
      Language.Arralac.Prelude.Bag
      Language.Arralac.Prelude.Debug
      Language.Arralac.Prelude.Locale
      Language.Arralac.Prelude.Pass
      Language.Arralac.Prelude.Pretty
      Language.Arralac.Prelude.Pretty.Class
      Language.Arralac.Prelude.Pretty.GPretty
      Language.Arralac.Prelude.Types
      Language.Arralac.Prelude.Unique
      Language.Arralac.Prelude.Unique.Supply
      Language.Arralac.Prelude.Unique.Types
      Language.Arralac.Reader.Error
      Language.Arralac.Reader.Run
      Language.Arralac.Renamer.ConvertParsed
      Language.Arralac.Renamer.Error
      Language.Arralac.Renamer.Run
      Language.Arralac.Renamer.Types
      Language.Arralac.Solver.Check
      Language.Arralac.Solver.Error
      Language.Arralac.Solver.Run
      Language.Arralac.Solver.Solve
      Language.Arralac.Solver.Types
      Language.Arralac.Solver.Unify
      Language.Arralac.Syntax.Local.Anno
      Language.Arralac.Syntax.Local.Extension.Rn
      Language.Arralac.Syntax.Local.Extension.Tc
      Language.Arralac.Syntax.Local.Extension.Zn
      Language.Arralac.Syntax.Local.Name
      Language.Arralac.Syntax.Local.RnVar
      Language.Arralac.Syntax.Local.SynLit
      Language.Arralac.Syntax.Local.SynTerm.Rn
      Language.Arralac.Syntax.Local.SynTerm.Tc
      Language.Arralac.Syntax.Local.SynTerm.Zn
      Language.Arralac.Syntax.Local.SynTermVar.Rn
      Language.Arralac.Syntax.Local.SynTermVar.Tc
      Language.Arralac.Syntax.Local.SynTermVar.Zn
      Language.Arralac.Syntax.Local.SynType.Rn
      Language.Arralac.Syntax.Local.SynType.Tc
      Language.Arralac.Syntax.Local.SynType.Zn
      Language.Arralac.Syntax.Local.Type
      Language.Arralac.Syntax.Local.TyVar.Rn
      Language.Arralac.Syntax.Local.TyVar.Tc
      Language.Arralac.Syntax.Local.TyVar.Zn
      Language.Arralac.Syntax.TTG.Extension
      Language.Arralac.Syntax.TTG.Lit
      Language.Arralac.Syntax.TTG.SynTerm
      Language.Arralac.Syntax.TTG.SynTermVar
      Language.Arralac.Syntax.TTG.SynType
      Language.Arralac.Syntax.TTG.Type
      Language.Arralac.Syntax.TTG.TyVar
      Language.Arralac.Typechecker.Constraints
      Language.Arralac.Typechecker.Error
      Language.Arralac.Typechecker.Run
      Language.Arralac.Typechecker.TcMonad
      Language.Arralac.Typechecker.TcTerm
      Language.Arralac.Typechecker.TcTyVar
      Language.Arralac.Typechecker.TcTyVarEnv
      Language.Arralac.Typechecker.Types
      Language.Arralac.Zonker.Tc.Zonk
      Language.Arralac.Zonker.Zn.Run
      Language.Arralac.Zonker.Zn.Zonk
  other-modules:
      Paths_arralac
  hs-source-dirs:
      src
  default-extensions:
      ApplicativeDo
      BlockArguments
      ConstraintKinds
      DataKinds
      DeriveAnyClass
      DeriveDataTypeable
      DeriveFoldable
      DeriveFunctor
      DeriveGeneric
      DeriveTraversable
      DerivingStrategies
      DerivingVia
      DuplicateRecordFields
      ExplicitNamespaces
      FlexibleContexts
      FlexibleInstances
      GADTs
      GeneralizedNewtypeDeriving
      ImplicitParams
      ImportQualifiedPost
      InstanceSigs
      KindSignatures
      LambdaCase
      MonoLocalBinds
      MultiParamTypeClasses
      MultiWayIf
      NamedFieldPuns
      OverloadedLabels
      OverloadedRecordDot
      OverloadedStrings
      PatternSynonyms
      PolyKinds
      QuantifiedConstraints
      QuasiQuotes
      RankNTypes
      ScopedTypeVariables
      StandaloneDeriving
      TemplateHaskell
      TupleSections
      TypeApplications
      TypeFamilies
      TypeFamilyDependencies
      TypeOperators
      TypeSynonymInstances
      UndecidableInstances
  ghc-options: -Wall -Wcompat -Widentities -Wincomplete-record-updates -Wincomplete-uni-patterns -Wmissing-home-modules -Wpartial-fields -Wredundant-constraints -Wno-missing-export-lists
  build-depends:
      IntervalMap
    , PyF
    , aeson
    , array >=0.5.5.0
    , base >=4.7 && <5
    , bifunctors
    , co-log-core
    , code-page
    , containers
    , deepseq
    , free-foil
    , generic-lens
    , kind-generics
    , kind-generics-th
    , lens
    , lsp
    , lsp-types
    , mtl
    , optparse-applicative
    , prettyprinter
    , sorted-list
    , stm
    , text
    , unliftio
    , with-utf8
  default-language: Haskell2010
  if !flag(nix)
    build-tools:
        alex
      , happy
    build-tool-depends:
        BNFC:bnfc

executable arralac
  main-is: Main.hs
  other-modules:
      Paths_arralac
  hs-source-dirs:
      app
  default-extensions:
      ApplicativeDo
      BlockArguments
      ConstraintKinds
      DataKinds
      DeriveAnyClass
      DeriveDataTypeable
      DeriveFoldable
      DeriveFunctor
      DeriveGeneric
      DeriveTraversable
      DerivingStrategies
      DerivingVia
      DuplicateRecordFields
      ExplicitNamespaces
      FlexibleContexts
      FlexibleInstances
      GADTs
      GeneralizedNewtypeDeriving
      ImplicitParams
      ImportQualifiedPost
      InstanceSigs
      KindSignatures
      LambdaCase
      MonoLocalBinds
      MultiParamTypeClasses
      MultiWayIf
      NamedFieldPuns
      OverloadedLabels
      OverloadedRecordDot
      OverloadedStrings
      PatternSynonyms
      PolyKinds
      QuantifiedConstraints
      QuasiQuotes
      RankNTypes
      ScopedTypeVariables
      StandaloneDeriving
      TemplateHaskell
      TupleSections
      TypeApplications
      TypeFamilies
      TypeFamilyDependencies
      TypeOperators
      TypeSynonymInstances
      UndecidableInstances
  ghc-options: -Wall -Wcompat -Widentities -Wincomplete-record-updates -Wincomplete-uni-patterns -Wmissing-home-modules -Wpartial-fields -Wredundant-constraints -Wno-missing-export-lists -threaded -rtsopts -with-rtsopts=-N
  build-depends:
      IntervalMap
    , PyF
    , aeson
    , arralac
    , array >=0.5.5.0
    , base >=4.7 && <5
    , bifunctors
    , co-log-core
    , code-page
    , containers
    , deepseq
    , free-foil
    , generic-lens
    , kind-generics
    , kind-generics-th
    , lens
    , lsp
    , lsp-types
    , mtl
    , optparse-applicative
    , prettyprinter
    , sorted-list
    , stm
    , text
    , unliftio
    , with-utf8
  default-language: Haskell2010
  if !flag(nix)
    build-tools:
        alex
      , happy
    build-tool-depends:
        BNFC:bnfc
